(lambda __operator, __g, __y: [[[(lambda __mod: [(lambda __mod: [[[[(lambda __items, __sentinel, __after: __y(lambda __this: lambda: (lambda __i: [[[[__this() for __g['predictions'] in [(__operator.iadd(__g['predictions'], (clf.predict(test_df[features], num_iteration=clf.best_iteration) / folds.n_splits)))]][0] for __g['clf'] in [(lgb.train(param, trn_data, 1000000, valid_sets=[trn_data, val_data], verbose_eval=5000, early_stopping_rounds=2000))]][0] for (__g['trn_data'], __g['val_data']) in [((lgb.Dataset(augment(train_df.iloc[trn_idx][features], train_df['target'].iloc[trn_idx])), lgb.Dataset(train_df.iloc[val_idx][features], train_df['target'].iloc[val_idx])))]][0] for (__g['fold_'], (__g['trn_idx'], __g['val_idx'])) in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(enumerate(folds.split(train_df.values, train_df['target'].values))), [], lambda: (pd.DataFrame({'ID_code': test_df.ID_code.values, 'target': predictions}).to_csv('submission.csv', index=False), None)[1]) for (__g['features'], __g['param'], __g['folds'], __g['oof'], __g['predictions']) in [(([c for __g['c'] in train_df.columns if (c not in ['ID_code', 'target'])], {'bagging_freq': 5, 'bagging_fraction': 0.331, 'boost_from_average': 'false', 'boost': 'gbdt', 'feature_fraction': 0.0405, 'learning_rate': 0.0083, 'max_depth': -1, 'metric': 'auc', 'min_data_in_leaf': 80, 'min_sum_hessian_in_leaf': 10.0, 'num_leaves': 13, 'num_threads': 8, 'tree_learner': 'serial', 'objective': 'binary', 'verbosity': 1}, StratifiedKFold(n_splits=15, shuffle=False, random_state=228), np.zeros(len(train_df)), np.zeros(len(test_df))))]][0] for (__g['train_df'], __g['test_df']) in [((pd.read_csv('../input/train.csv'), pd.read_csv('../input/test.csv')))]][0] for __g['augment'], augment.__name__ in [(lambda x, y, t=2: (lambda __l: [[(lambda __items, __sentinel, __after: __y(lambda __this: lambda: (lambda __i: [[[[(lambda __items, __sentinel, __after: __y(lambda __this: lambda: (lambda __i: [(np.random.shuffle(__l['ids']), [__this() for __l['x1'][:, __l['c']] in [(__l['x1'][__l['ids']][:, __l['c']])]][0])[1] for __l['c'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(range(__l['x1'].shape[1])), [], lambda: (__l['xs'].append(__l['x1']), __this())[1]) for __l['ids'] in [(np.arange(__l['x1'].shape[0]))]][0] for __l['x1'] in [(__l['x'][__l['mask']].copy())]][0] for __l['mask'] in [((__l['y'] > 0))]][0] for __l['i'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(range(__l['t'])), [], lambda: (lambda __items, __sentinel, __after: __y(lambda __this: lambda: (lambda __i: [[[[(lambda __items, __sentinel, __after: __y(lambda __this: lambda: (lambda __i: [(np.random.shuffle(__l['ids']), [__this() for __l['x1'][:, __l['c']] in [(__l['x1'][__l['ids']][:, __l['c']])]][0])[1] for __l['c'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(range(__l['x1'].shape[1])), [], lambda: (__l['xn'].append(__l['x1']), __this())[1]) for __l['ids'] in [(np.arange(__l['x1'].shape[0]))]][0] for __l['x1'] in [(__l['x'][__l['mask']].copy())]][0] for __l['mask'] in [((__l['y'] == 0))]][0] for __l['i'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(range((__l['t'] // 2))), [], lambda: [[[[[[(__l['x'], __l['y']) for __l['y'] in [(np.concatenate([__l['y'], __l['ys'], __l['yn']]))]][0] for __l['x'] in [(np.vstack([__l['x'], __l['xs'], __l['xn']]))]][0] for __l['yn'] in [(np.zeros(__l['xn'].shape[0]))]][0] for __l['ys'] in [(np.ones(__l['xs'].shape[0]))]][0] for __l['xn'] in [(np.vstack(__l['xn']))]][0] for __l['xs'] in [(np.vstack(__l['xs']))]][0])) for (__l['xs'], __l['xn']) in [(([], []))]][0] for __l['x'], __l['y'], __l['t'] in [(x, y, t)]][0])({}), 'augment')]][0] for __g['StratifiedKFold'] in [(__mod.StratifiedKFold)]][0])(__import__('sklearn.model_selection', __g, __g, ('StratifiedKFold',), 0)) for __g['roc_auc_score'] in [(__mod.roc_auc_score)]][0])(__import__('sklearn.metrics', __g, __g, ('roc_auc_score',), 0)) for __g['np'] in [(__import__('numpy', __g, __g))]][0] for __g['pd'] in [(__import__('pandas', __g, __g))]][0] for __g['lgb'] in [(__import__('lightgbm', __g, __g))]][0])(__import__('operator', level=0), globals(), (lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))))